{"version":3,"sources":["components/Header.js","components/Footer.js","components/Poster.js","components/Posters.js","components/Topic.js","components/Topics.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Footer","HOME_URL","AVATAR_SIZE","Poster","props","formattedURL","avatar_url","replace","avatarUrl","concat","Fragment","src","title","username","alt","Posters","posters","postersData","map","poster","user_id","poster_id","users","find","user","id","components_Poster","key","avatar_template","dayjs","extend","relativeTime","Topic","_props$data$topic","data","topic","reply_count","views","last_posted_at","href","rel","components_Posters","fromNow","Topics","topicsList","topics","components_Topic","App","state","error","isLoaded","getAPIData","_callee","res","regenerator_default","wrap","_context","prev","next","axios","get","sent","topic_list","_this","setState","t0","stop","this","components_Header","components_Topics","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f484dc9c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <header>\n      <h1 className=\"txt-center\">\n        freeCodeCamp Forum Homepage\n      </h1>\n      <div>\n        <span className=\"span--text-title\">Title</span>\n        <span className=\"span--image-list\">Posters</span>\n        <span className=\"span--number\">Replies</span>\n        <span className=\"span--number\">Views</span>\n        <span>Activity</span>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","import React from 'react';\n\nfunction Footer() {\n  return (\n    <p className=\"txt-center\">\n      Copyright &copy; 2019. Miguel T Rivera.\n    </p>\n  )\n}\n\nexport default Footer;","import React from 'react';\n\nconst HOME_URL = 'https://freecodecamp.org';\nconst AVATAR_SIZE = 25;\n\nfunction Poster(props) {\n  const formattedURL = props.avatar_url\n    .replace('\\\\', '')\n    .replace('{size}', AVATAR_SIZE);\n\n  const avatarUrl = HOME_URL.concat(formattedURL);\n\n  return (\n    <>\n      <img className=\"img--image-circle\"\n        src={avatarUrl}\n        title={props.username}\n        alt=''\n      />\n    </>\n  )\n}\n\nexport default Poster;","import React from 'react';\nimport Poster from '../components/Poster';\n\nfunction Posters(props) {\n  const posterIds = props.postersData.map(poster => {\n    return poster.user_id\n  })\n\n  const posterDetails = posterIds.map(poster_id => {\n    return props.users.find(user => user.id === poster_id)\n  })\n\n  const posters = posterDetails.map(poster => {\n    return (\n      <Poster\n        key={poster.id}\n        username={poster.username}\n        avatar_url={poster.avatar_template}\n      />\n    )\n  })\n\n  return (\n    <ul className=\"ul--list\">\n      { posters }\n    </ul>\n  )\n}\n\nexport default Posters;","import React from 'react';\nimport dayjs from 'dayjs';\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport Posters from '../components/Posters';\n\ndayjs.extend(relativeTime);\n\nfunction Topic(props) {\n  const {\n    id,\n    title,\n    posters,\n    reply_count,\n    views,\n    last_posted_at\n  } = props.data.topic;\n  \n  return (\n    <li>\n      <span className=\"span--text-title\">\n        <a href={`https://www.freecodecamp.org/forum/t/${id}`} rel=\"noopener noreferrer\">\n        {title}\n        </a>\n      </span>\n      <span className=\"span--image-list\">\n        {\n          <Posters\n            postersData={posters}\n            users={props.users}\n          />\n        }\n      </span>\n      <span className=\"span--number\">{reply_count}</span>\n      <span className=\"span--number\">{views}</span>\n      <span className=\"span--date-lastpost\">\n        {dayjs(last_posted_at).fromNow()}\n      </span>\n    </li>\n  )\n}\n\nexport default Topic;","import React from 'react';\nimport Topic from './Topic';\n\nfunction Topics(props) {\n  const topicsList = props.topics.map(topic => {\n    return (\n      <Topic\n        key={topic.id}\n        data={{topic}}\n        users={props.users}\n      />\n    )\n  })\n\n  return (\n    <ul className=\"ul--list\">\n      { topicsList }\n    </ul>\n  )\n}\n\nexport default Topics;","import axios from 'axios';\nimport React from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Topics from './components/Topics';\n\nclass App extends React.Component {\n  state = {\n    error: null,\n    users: [],\n    topics: [],\n    isLoaded: false\n  }\n\n  componentDidMount() {\n    this.getAPIData();\n  }\n\n  getAPIData = async() => {\n    try {\n      let res = await axios.get('https://buttercup-island.glitch.me/latest');\n      let { users } = res.data;\n      let { topics } = res.data.topic_list;\n      this.setState({\n        users,\n        topics,\n        isLoaded: true\n      });\n    } catch(error) {\n      this.setState({\n        error,\n        isLoaded: true\n      });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <main className=\"container\">\n          <Header />\n          {\n            !this.state.isLoaded &&\n            <h2>Loading latest posts from server...</h2>\n          }\n          {\n            this.state.error &&\n            <h2>{this.state.error}</h2>\n          }\n          <Topics\n            topics={this.state.topics}\n            users={this.state.users}\n          />\n          <Footer />\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}